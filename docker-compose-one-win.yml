# version: '3.4'  # Docker Compose 파일의 버전을 정의합니다. 여기서는 3.4 버전을 사용합니다.

services:  # 여러 Docker 컨테이너를 정의하는 services 섹션입니다.
  one-api:  # 'one-api'라는 서비스(컨테이너)를 정의합니다.
    image: ghcr.io/sol5288/one-api-kor:latest  # 사용할 Docker 이미지는 'one-api-kor'라는 이미지의 최신 버전을 사용합니다.
    build:  # 이 이미지가 로컬에서 빌드되어야 하는 경우, 빌드 관련 설정을 정의합니다.
      context: /mnt/d/yihansoft/26_One_Hub  # Docker 빌드를 위한 컨텍스트 경로를 지정합니다. 이 경로에서 Dockerfile을 찾습니다.
      dockerfile: Dockerfile  # 사용할 Dockerfile의 이름을 명시합니다. 여기서는 'Dockerfile'을 사용합니다.
    container_name: one-api  # 이 서비스에 대한 컨테이너 이름을 'one-api'로 지정합니다.
    restart: always  # 컨테이너가 비정상적으로 종료되더라도 항상 재시작하도록 설정합니다.
    command: --log-dir /app/logs  # 컨테이너가 실행될 때 사용할 명령어를 지정합니다. 여기서는 로그 디렉터리를 '/app/logs'로 설정합니다.
    ports:  # 호스트와 컨테이너 간의 포트 매핑을 정의합니다.
      - "3001:3000"  # 호스트의 3001번 포트를 컨테이너의 3000번 포트와 연결합니다.
    volumes:  # 호스트와 컨테이너 간의 파일 시스템을 공유하는 볼륨을 정의합니다.
      - oneapi_data:/data  # 도커의 oneapi 볼륨을 컨테이너의 '/data' 디렉터리와 연결합니다.
      - logs:/app/logs  # 도커의 logs 볼륨을 컨테이너의 '/app/logs' 디렉터리와 연결합니다.
    environment:  # 컨테이너 내에서 사용할 환경 변수를 정의합니다.
      - SQL_DSN=oneapi:1q2w3e4r@tcp(db:3306)/one-api  # MySQL 데이터베이스 연결 문자열입니다.
      - REDIS_CONN_STRING=redis://redis  # Redis 연결 문자열입니다.
      - SESSION_SECRET=random_string  # 세션 암호화를 위한 비밀 문자열입니다.
      - TZ=Asia/Seoul  # 컨테이너의 시간대를 'Asia/Seoul'로 설정합니다.
    depends_on:  # 'one-api' 서비스가 실행되기 전에 먼저 실행되어야 할 서비스들을 정의합니다.
      - redis  # Redis 서비스에 의존합니다.
      - db  # MySQL 데이터베이스 서비스에 의존합니다.
    networks:  # 이 컨테이너가 연결될 네트워크를 정의합니다.
      - default  # 기본 네트워크에 연결합니다.
      - fastgpt-network  # 외부 네트워크인 'fastgpt-network'에도 연결합니다.
    healthcheck:  # 컨테이너의 상태를 확인하기 위한 헬스체크 설정입니다.
      test: [ "CMD-SHELL", "wget -q -O - http://localhost:3000/api/status | grep -o '\"success\":\\s*true' | awk -F: '{print $2}'" ]  # 컨테이너의 상태를 확인하는 명령어입니다. 'success'가 true일 때 정상으로 간주됩니다.
      interval: 30s  # 헬스체크를 30초 간격으로 수행합니다.
      timeout: 10s  # 헬스체크 명령이 10초 내에 응답하지 않으면 실패로 간주합니다.
      retries: 3  # 헬스체크가 실패할 경우, 3번까지 재시도합니다.

  redis:  # 'redis'라는 서비스를 정의합니다.
    image: "${REGISTRY:-docker.io}/redis:latest"  # 사용할 Redis 이미지의 위치를 정의합니다. 환경 변수 'REGISTRY'를 사용하여 레지스트리를 지정할 수 있으며, 지정되지 않은 경우 기본 도커 허브(docker.io)에서 가져옵니다.
    container_name: redis  # 이 서비스의 컨테이너 이름을 'redis'로 지정합니다.
    restart: always  # 컨테이너가 비정상적으로 종료되더라도 항상 재시작하도록 설정합니다.
    networks:  # 이 컨테이너가 연결될 네트워크를 정의합니다.
      - default  # 기본 네트워크에 연결합니다.
      - fastgpt-network  # 외부 네트워크인 'fastgpt-network'에도 연결합니다.

  db:  # 'db'라는 MySQL 데이터베이스 서비스를 정의합니다.
    image: "${REGISTRY:-docker.io}/mysql:8.2.0"  # 사용할 MySQL 이미지의 위치를 정의합니다. 환경 변수 'REGISTRY'를 사용하여 레지스트리를 지정할 수 있으며, 지정되지 않은 경우 기본 도커 허브(docker.io)에서 가져옵니다.
    restart: always  # 컨테이너가 비정상적으로 종료되더라도 항상 재시작하도록 설정합니다.
    container_name: mysql  # 이 서비스의 컨테이너 이름을 'mysql'로 지정합니다.
    volumes:  # 호스트와 컨테이너 간의 파일 시스템을 공유하는 볼륨을 정의합니다.
      - mysql_data:/var/lib/mysql  # 도커의 mysql_data 볼륨을 컨테이너의 MySQL 데이터 디렉터리인 '/var/lib/mysql'과 연결합니다.
      - ./mysql-init.sql:/docker-entrypoint-initdb.d/init.sql  # 초기화
    ports:  # 호스트와 컨테이너 간의 포트 매핑을 정의합니다.
      - '3307:3306'  # 호스트의 3307번 포트를 컨테이너의 3306번 포트와 연결합니다.
    command: 
        - mysqld
        - --user=mysql
        - --ssl=0
        - --require_secure_transport=OFF
    environment:  # 컨테이너 내에서 사용할 환경 변수를 정의합니다.
      TZ: Asia/Seoul  # 컨테이너의 시간대를 'Asia/Seoul'로 설정합니다.
      MYSQL_ROOT_PASSWORD: '1q2w3e4r'  # MySQL 루트 사용자(root)의 비밀번호를 설정합니다.
      MYSQL_USER: oneapi  # MySQL에서 사용할 사용자 이름을 설정합니다.
      MYSQL_PASSWORD: '1q2w3e4r'  # 'oneapi' 사용자의 비밀번호를 설정합니다.
      MYSQL_DATABASE: one-api  # 생성할 데이터베이스의 이름을 설정합니다.
    networks:  # 이 컨테이너가 연결될 네트워크를 정의합니다.
      - default  # 기본 네트워크에 연결합니다.
      - fastgpt-network  # 외부 네트워크인 'fastgpt-network'에도 연결합니다.

networks:  # 사용자 정의 네트워크를 정의하는 섹션입니다.
  default:  # 기본 네트워크를 정의합니다.
  fastgpt-network:  # 외부 네트워크 'fastgpt-network'를 정의합니다.
    external: true  # 이 네트워크가 이미 외부에 존재하는 네트워크임을 명시합니다.

volumes:
  mysql_data:
  oneapi_data:
  logs: