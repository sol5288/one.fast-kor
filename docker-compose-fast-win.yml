#version: '3.3'  # Docker Compose 파일의 버전을 정의합니다. 여기서는 3.3 버전을 사용합니다.

services:  # 여러 Docker 컨테이너를 정의하는 services 섹션입니다.
  pg:  # 'pg'라는 PostgreSQL 데이터베이스 서비스를 정의합니다.
    image: pgvector/pgvector:0.7.0-pg15  # pgvector 확장이 포함된 PostgreSQL 이미지의 특정 버전을 사용합니다.
    container_name: pg  # 이 서비스의 컨테이너 이름을 'pg'로 지정합니다.
    restart: always  # 컨테이너가 비정상적으로 종료되더라도 항상 재시작하도록 설정합니다.
    ports:  # 호스트와 컨테이너 간의 포트 매핑을 정의합니다.
      - 5432:5432  # 호스트의 5432번 포트를 컨테이너의 5432번 포트와 연결합니다.
    networks:  # 이 컨테이너가 연결될 네트워크를 정의합니다.
      - fastgpt  # 내부 네트워크 'fastgpt'에 연결합니다.
      - fastgpt-network  # 외부 네트워크 'fastgpt-network'에도 연결합니다.
    environment:  # 컨테이너 내에서 사용할 환경 변수를 정의합니다.
      - POSTGRES_USER=mypg  # PostgreSQL 데이터베이스의 사용자 이름을 설정합니다.
      - POSTGRES_PASSWORD=1q2w3e4r  # PostgreSQL 데이터베이스의 비밀번호를 설정합니다.
      - POSTGRES_DB=postgres  # 생성할 데이터베이스의 이름을 설정합니다.
    volumes:  # 호스트와 컨테이너 간의 파일 시스템을 공유하는 볼륨을 정의합니다.
      - pg_data:/var/lib/postgresql/data  # 도커의 pg_data 볼륨을 컨테이너의 PostgreSQL 데이터 디렉터리와 연결합니다.

  mongo:  # 'mongo'라는 MongoDB 서비스를 정의합니다.
    image: mongo:5.0.18  # MongoDB의 특정 버전(5.0.18)을 사용하는 이미지를 정의합니다.
    container_name: mongo  # 이 서비스의 컨테이너 이름을 'mongo'로 지정합니다.
    restart: always  # 컨테이너가 비정상적으로 종료되더라도 항상 재시작하도록 설정합니다.
    ports:  # 호스트와 컨테이너 간의 포트 매핑을 정의합니다.
      - 27017:27017  # 호스트의 27017번 포트를 컨테이너의 27017번 포트와 연결합니다.
    networks:  # 이 컨테이너가 연결될 네트워크를 정의합니다.
      - fastgpt  # 내부 네트워크 'fastgpt'에 연결합니다.
      - fastgpt-network  # 외부 네트워크 'fastgpt-network'에도 연결합니다.
    command: mongod --keyFile /data/mongodb.key --replSet rs0  # MongoDB 인스턴스를 키파일과 복제 세트(rs0)로 초기화하는 명령어입니다.
    environment:  # 컨테이너 내에서 사용할 환경 변수를 정의합니다.
      - MONGO_INITDB_ROOT_USERNAME=mymonggo  # MongoDB의 루트 사용자 이름을 설정합니다.
      - MONGO_INITDB_ROOT_PASSWORD=1q2w3e4r  # MongoDB의 루트 비밀번호를 설정합니다.
    volumes:  # 호스트와 컨테이너 간의 파일 시스템을 공유하는 볼륨을 정의합니다.
      - mongo_data:/data/db  # 도커의 mongo_data 볼륨을 컨테이너의 데이터베이스 디렉터리('/data/db')와 연결합니다.
    entrypoint:  # 컨테이너 시작 시 실행될 스크립트나 명령어를 정의합니다.
      - bash  # bash 셸을 사용하여 아래 명령어들을 실행합니다.
      - -c  # bash에 전달된 명령어를 실행하는 옵션입니다.
      - |  # 여러 줄의 스크립트를 실행합니다.
        openssl rand -base64 128 > /data/mongodb.key  # 128비트 길이의 키를 생성하여 '/data/mongodb.key' 파일에 저장합니다.
        chmod 400 /data/mongodb.key  # 키 파일의 권한을 400으로 설정하여 소유자만 읽을 수 있게 합니다.
        chown 999:999 /data/mongodb.key  # MongoDB 사용자(UID 999)에게 키 파일의 소유권을 설정합니다.
        echo 'const isInited = rs.status().ok === 1
        if(!isInited){
          rs.initiate({
              _id: "rs0",
              members: [
                  { _id: 0, host: "mongo:27017" }
              ]
          })
        }' > /data/initReplicaSet.js  # MongoDB 복제 세트를 초기화하는 JavaScript 코드를 '/data/initReplicaSet.js'에 저장합니다.
        exec docker-entrypoint.sh "$$@" &  # 기본 MongoDB 엔트리포인트 스크립트를 백그라운드에서 실행합니다.
        until mongo -u mymonggo -p 1q2w3e4r --authenticationDatabase admin --eval "print('waited for connection')" > /dev/null 2>&1; do  # MongoDB 서버가 시작될 때까지 반복해서 연결을 시도합니다.
          echo "Waiting for MongoDB to start..."  # MongoDB가 시작될 때까지 대기 중임을 출력합니다.
          sleep 2  # 2초 동안 대기합니다.
        done
        mongo -u mymonggo -p 1q2w3e4r --authenticationDatabase admin /data/initReplicaSet.js  # 연결 후 복제 세트를 초기화하는 스크립트를 실행합니다.
        wait $$!  # 백그라운드에서 실행된 프로세스가 종료될 때까지 대기합니다.

  sandbox:  # 'sandbox'라는 서비스를 정의합니다. 이는 FastGPT의 샌드박스 환경입니다.
    container_name: sandbox  # 이 서비스의 컨테이너 이름을 'sandbox'로 지정합니다.
    image: ghcr.io/labring/fastgpt-sandbox:latest  # FastGPT 샌드박스 환경의 최신 이미지를 사용합니다.
    networks:  # 이 컨테이너가 연결될 네트워크를 정의합니다.
      - fastgpt  # 내부 네트워크 'fastgpt'에 연결합니다.
      - fastgpt-network  # 외부 네트워크 'fastgpt-network'에도 연결합니다.
    restart: always  # 컨테이너가 비정상적으로 종료되더라도 항상 재시작하도록 설정합니다.

  fastgpt:  # 'fastgpt'라는 서비스를 정의합니다.
    container_name: fastgpt  # 이 서비스의 컨테이너 이름을 'fastgpt'로 지정합니다.
    image: ghcr.io/sol5288/fastgpt-kor:latest  # ghcr.io에서 'fastgpt-kor' 이미지의 최신버전을 사용합니다.
    build:  # 이 이미지가 로컬에서 빌드되어야 하는 경우, 빌드 관련 설정을 정의합니다.
      context: /mnt/d/yihansoft/25_FastGPT/projects/app  # Docker 빌드를 위한 컨텍스트 경로를 지정합니다. 이 경로에서 Dockerfile을 찾습니다.
      dockerfile: Dockerfile  # 사용할 Dockerfile의 이름을 명시합니다. 여기서는 'Dockerfile'을 사용합니다.
      args:  # 빌드 시 전달할 인자들을 정의합니다.
        name: app  # --build-arg name=app 을 정의합니다.
    ports:  # 호스트와 컨테이너 간의 포트 매핑을 정의합니다.
      - 3000:3000  # 호스트의 3000번 포트를 컨테이너의 3000번 포트와 연결합니다.
    networks:  # 이 컨테이너가 연결될 네트워크를 정의합니다.
      - fastgpt  # 내부 네트워크 'fastgpt'에 연결합니다.
      - fastgpt-network  # 외부 네트워크 'fastgpt-network'에도 연결합니다.
    depends_on:  # 'fastgpt' 서비스가 실행되기 전에 먼저 실행되어야 할 서비스들을 정의합니다.
      - mongo  # MongoDB 서비스에 의존합니다.
      - pg  # PostgreSQL 서비스에 의존합니다.
      - sandbox  # 샌드박스 환경 서비스에 의존합니다.
    restart: always  # 컨테이너가 비정상적으로 종료되더라도 항상 재시작하도록 설정합니다.
    environment:  # 컨테이너 내에서 사용할 환경 변수를 정의합니다.
      - DEFAULT_ROOT_PSW=1234  # FastGPT의 기본 루트 사용자 비밀번호를 설정합니다.
      - OPENAI_BASE_URL=http://one-api:3000/v1  # OpenAI API 요청을 보낼 기본 URL을 설정합니다.
      - CHAT_API_KEY=sk-toyFa7mtza6f52XSEf31C9Ad2eE74eC9B18307C59f0aC16d  # FastGPT에서 사용할 API 키를 설정합니다.
      - DB_MAX_LINK=30  # 데이터베이스의 최대 연결 수를 30으로 설정합니다.
      - TOKEN_KEY=any  # 토큰을 암호화할 키를 설정합니다.
      - ROOT_KEY=root_key  # 루트 키를 설정합니다.
      - FILE_TOKEN_KEY=filetoken  # 파일 토큰을 암호화할 키를 설정합니다.
      - MONGODB_URI=mongodb://mymonggo:1q2w3e4r@mongo:27017/fastgpt?authSource=admin  # MongoDB의 연결 URI를 설정합니다.
      - PG_URL=postgresql://mypg:1q2w3e4r@pg:5432/postgres  # PostgreSQL의 연결 URI를 설정합니다.
      - SANDBOX_URL=http://sandbox:3000  # 샌드박스 환경의 URL을 설정합니다.
      - LOG_LEVEL=info  # 로그 레벨을 'info'로 설정하여 정보 수준 이상의 로그를 출력합니다.
      - STORE_LOG_LEVEL=warn  # 저장소 관련 로그 레벨을 'warn'으로 설정하여 경고 수준 이상의 로그를 출력합니다.
    volumes:  # 호스트와 컨테이너 간의 파일 시스템을 공유하는 볼륨을 정의합니다.
      - ./config:/app/data  # 호스트의 './config' 폴더를 컨테이너의 '/app/data'폴더에 연결합니다.

networks:  # 사용자 정의 네트워크를 정의하는 섹션입니다.
  fastgpt:  # 내부 네트워크 'fastgpt'를 정의합니다.
  fastgpt-network:  # 외부 네트워크 'fastgpt-network'를 정의합니다.
    external: true  # 이 네트워크가 이미 외부에 존재하는 네트워크임을 명시합니다.

volumes:
  pg_data:
  mongo_data:
